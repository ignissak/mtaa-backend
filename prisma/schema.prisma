// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
  points   Int     @default(0) // this field is only for performance reasons

  visited  UserVisitedPlaces[]
  settings UserSettings?

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userSettingsId Int
}

model UserSettings {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  darkMode      Boolean @default(false)
  visitedPublic Boolean @default(true)
  language      String  @default("en-GB")
}

enum PlaceType {
  RESTAURANT
  BAR
  CAFE
  MUSEUM
  PARK
  BEACH
  CASTLE
  OTHER
}

model Place {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  latitude    Float
  longitude   Float
  type        PlaceType
  points      Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  visitedBy UserVisitedPlaces[]
  images    Image[]
  reviews   Review[]
  links     ExternalLink[]
}

model UserVisitedPlaces {
  id      Int @id @default(autoincrement())
  userId  Int
  placeId Int

  user  User  @relation(fields: [userId], references: [id])
  place Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id       Int    @id @default(autoincrement())
  fileName String
  data     Bytes

  placeId Int?
  place   Place? @relation(fields: [placeId], references: [id], onDelete: Cascade)

  reviewId Int?
  review   Review? @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id      Int    @id @default(autoincrement())
  comment String @db.Text
  rating  Float

  placeId Int
  place   Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LinkType {
  WEB
  FACEBOOK
  INSTAGRAM
  EMAIL
  WIKI
}

model ExternalLink {
  id   Int      @id @default(autoincrement())
  type LinkType
  url  String
  alt  String

  placeId Int
  place   Place @relation(fields: [placeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
